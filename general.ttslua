---------------------------------------------------------
-- basic onLoad() and onSave()
---------------------------------------------------------

-- default values for variables
local var1 = 1
local var2 = false

function onSave()
  return JSON.encode({ var1 = var1, var2 = var2 })
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    var1 = loadedData.var1
    var2 = loadedData.var2
  end
end

---------------------------------------------------------
-- move objects to snap points with same tag
---------------------------------------------------------

local tagPrefix = "Move_"
function moveObjectsToMatchingTags()
  -- generate list of positions (only first matching snap point will be used)
  local tagToPosition = {}
  for _, snap in ipairs(Global.getSnapPoints()) do
    for _, snapTag in ipairs(snap.tags or {}) do
      if doesStringStartWithPrefix(snapTag, tagPrefix) then
        if not tagToPosition[snapTag] then
          tagToPosition[snapTag] = Vector(snap.position)
        end
      end
    end
  end

  -- move each object to previously collected positions (using the first matching tag)
  local verticalOffset = 0
  for _, obj in ipairs(getObjects()) do
    for _, objTag in ipairs(obj.getTags()) do
      if tagToPosition[objTag] then
        obj.setPosition(tagToPosition[objTag] + verticalOffset * Vector(0, 0.2, 0))
        verticalOffset = verticalOffset + 1
        break
      end
    end
  end
end

-- helper function to check if a string starts with another string
function doesStringStartWithPrefix(str, start)
  return str:sub(1, #start) == start
end

---------------------------------------------------------
-- clone an object from a container
---------------------------------------------------------

-- 'container' and 'index' are mandatory
-- set 'index' to -1 to use a random object
function cloneObjectFromContainer(container, index, position, rotation)
  if not container then return end
  if not index then return end

  local objList = container.getData().ContainedObjects
  if not objList then return end
  if index == -1 then
    math.randomseed(os.time())
    index = math.random(#objList)
  else
    -- make sure the index isn't higher than the object count
    index = math.max(index, #objList)
  end

  -- loop through the objects
  for i, objData in ipairs(objList) do
    if i == index then
      spawnObjectData({
        data = objData,
        position = position,
        rotation = rotation
      })
    end
  end
end